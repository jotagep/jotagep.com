---
import { Image, type LocalImageProps } from 'astro:assets'

type ImgProps = LocalImageProps

export type Props = ImgProps & {
  src: ImageMetadata
  transitionName?: string
}

const { class: className, transitionName, ...props } = Astro.props

const hasCustomHeight =
  className.includes('h-') || className.includes('aspect-')

let style = {}
if (props.src && !hasCustomHeight) {
  const aspectRatio = props.src.width / props.src.height
  style = {
    paddingBottom: `${100 / aspectRatio}%`,
  }
}
---

<div
  class:list={['image-blur relative overflow-hidden', className]}
  transition:name={transitionName}
  {style}
>
  <Image data-blur {...props} transition:persist={`${transitionName}-loaded`} />
  <Image
    src={props.src}
    quality={5}
    width={10}
    alt={props.alt}
    loading={props.loading}
  />
</div>

<style>
  .image-blur img {
    display: block;
    position: absolute;
    object-fit: cover;
    inset: 0;
    width: 100%;
    height: 100%;
    filter: blur(10px);
    transform: scale(1.1);
    transition:
      filter 0.6s,
      transform 0.6s;
  }
  .image-blur img:global(.loaded) + img {
    opacity: 0;
  }
  .image-blur img:global(.loaded) {
    transform: scale(1);
    filter: blur(0);
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const allImages =
      document.querySelectorAll<HTMLImageElement>('img[data-blur]')

    allImages.forEach((img) => {
      if (img.complete) {
        img.classList.add('loaded')
      } else {
        img.addEventListener('load', () => {
          img.classList.add('loaded')
        })
      }
    })
  })
</script>
